Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.3.5/avr51/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/crtm128rfa1.o (exit)
/usr/lib/gcc/avr/4.3.5/avr51/libgcc.a(_clear_bss.o)
                              ATmegaBOOT_168.o (__do_clear_bss)
/usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/libc.a(eerd_byte_atmega128rfa1.o)
                              ATmegaBOOT_168.o (__eerd_byte_m128rfa1)
/usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/libc.a(eewr_byte_atmega128rfa1.o)
                              ATmegaBOOT_168.o (__eewr_byte_m128rfa1)

Allocating common symbols
Common symbol       size              file

address             0x2               ATmegaBOOT_168.o
buff                0x100             ATmegaBOOT_168.o
length              0x2               ATmegaBOOT_168.o
i                   0x1               ATmegaBOOT_168.o
address_high        0x1               ATmegaBOOT_168.o
flags               0x1               ATmegaBOOT_168.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00020000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
fuse             0x00820000         0x00000400         rw !x
lock             0x00830000         0x00000400         rw !x
signature        0x00840000         0x00000400         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

Address of section .data set to 0x800200
LOAD /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/crtm128rfa1.o
Address of section .text set to 0x1f000
LOAD ATmegaBOOT_168.o
LOAD /usr/lib/gcc/avr/4.3.5/avr51/libgcc.a
LOAD /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/libc.a
LOAD /usr/lib/gcc/avr/4.3.5/avr51/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0001f000      0x872
 *(.vectors)
 .vectors       0x0001f000      0x120 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/crtm128rfa1.o
                0x0001f000                __vectors
                0x0001f000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
 .progmem.data  0x0001f120        0x8 ATmegaBOOT_168.o
                0x0001f120                default_mac_address
                0x0001f128                . = ALIGN (0x2)
                0x0001f128                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0001f128        0x0 linker stubs
 *(.trampolines*)
                0x0001f128                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0001f128                __ctors_start = .
 *(.ctors)
                0x0001f128                __ctors_end = .
                0x0001f128                __dtors_start = .
 *(.dtors)
                0x0001f128                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0001f128        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/crtm128rfa1.o
                0x0001f128                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0001f128        0xc /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/crtm128rfa1.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0001f134       0x1a /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/crtm128rfa1.o
                0x0001f134                __do_copy_data
 .init4         0x0001f14e       0x10 /usr/lib/gcc/avr/4.3.5/avr51/libgcc.a(_clear_bss.o)
                0x0001f14e                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x0001f15e        0x8 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/crtm128rfa1.o
 *(.init9)
 *(.text)
 .text          0x0001f166        0x4 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/crtm128rfa1.o
                0x0001f166                __vector_38
                0x0001f166                __vector_22
                0x0001f166                __vector_63
                0x0001f166                __vector_28
                0x0001f166                __vector_67
                0x0001f166                __vector_1
                0x0001f166                __vector_32
                0x0001f166                __vector_71
                0x0001f166                __vector_34
                0x0001f166                __vector_62
                0x0001f166                __vector_24
                0x0001f166                __vector_12
                0x0001f166                __vector_55
                0x0001f166                __vector_69
                0x0001f166                __vector_46
                0x0001f166                __bad_interrupt
                0x0001f166                __vector_6
                0x0001f166                __vector_31
                0x0001f166                __vector_35
                0x0001f166                __vector_39
                0x0001f166                __vector_3
                0x0001f166                __vector_23
                0x0001f166                __vector_68
                0x0001f166                __vector_30
                0x0001f166                __vector_45
                0x0001f166                __vector_25
                0x0001f166                __vector_61
                0x0001f166                __vector_11
                0x0001f166                __vector_54
                0x0001f166                __vector_13
                0x0001f166                __vector_17
                0x0001f166                __vector_19
                0x0001f166                __vector_56
                0x0001f166                __vector_7
                0x0001f166                __vector_49
                0x0001f166                __vector_41
                0x0001f166                __vector_64
                0x0001f166                __vector_43
                0x0001f166                __vector_27
                0x0001f166                __vector_5
                0x0001f166                __vector_33
                0x0001f166                __vector_47
                0x0001f166                __vector_52
                0x0001f166                __vector_37
                0x0001f166                __vector_4
                0x0001f166                __vector_44
                0x0001f166                __vector_51
                0x0001f166                __vector_9
                0x0001f166                __vector_2
                0x0001f166                __vector_21
                0x0001f166                __vector_15
                0x0001f166                __vector_66
                0x0001f166                __vector_36
                0x0001f166                __vector_58
                0x0001f166                __vector_70
                0x0001f166                __vector_29
                0x0001f166                __vector_60
                0x0001f166                __vector_40
                0x0001f166                __vector_8
                0x0001f166                __vector_26
                0x0001f166                __vector_48
                0x0001f166                __vector_14
                0x0001f166                __vector_57
                0x0001f166                __vector_53
                0x0001f166                __vector_10
                0x0001f166                __vector_50
                0x0001f166                __vector_16
                0x0001f166                __vector_59
                0x0001f166                __vector_18
                0x0001f166                __vector_20
                0x0001f166                __vector_42
                0x0001f166                __vector_65
 .text          0x0001f16a      0x6d8 ATmegaBOOT_168.o
                0x0001f16a                putch
                0x0001f196                puthex
                0x0001f1d2                getch
                0x0001f286                gethexnib
                0x0001f2aa                gethex
                0x0001f2c0                getNch
                0x0001f2fa                byte_response
                0x0001f33c                nothing_response
                0x0001f36e                flash_led
                0x0001f3a0                main
 .text          0x0001f842        0x0 /usr/lib/gcc/avr/4.3.5/avr51/libgcc.a(_exit.o)
 .text          0x0001f842        0x0 /usr/lib/gcc/avr/4.3.5/avr51/libgcc.a(_clear_bss.o)
 .text          0x0001f842        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/libc.a(eerd_byte_atmega128rfa1.o)
 .text          0x0001f842        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/libc.a(eewr_byte_atmega128rfa1.o)
                0x0001f842                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x0001f842        0x0 /usr/lib/gcc/avr/4.3.5/avr51/libgcc.a(_exit.o)
 .text.libgcc   0x0001f842        0x0 /usr/lib/gcc/avr/4.3.5/avr51/libgcc.a(_clear_bss.o)
 .text.avr-libc
                0x0001f842       0x10 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/libc.a(eerd_byte_atmega128rfa1.o)
                0x0001f842                __eerd_byte_m128rfa1
 .text.avr-libc
                0x0001f852       0x1c /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/libc.a(eewr_byte_atmega128rfa1.o)
                0x0001f852                __eewr_byte_m128rfa1
                0x0001f854                __eewr_r18_m128rfa1
                0x0001f86e                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x0001f86e        0x0 /usr/lib/gcc/avr/4.3.5/avr51/libgcc.a(_exit.o)
                0x0001f86e                exit
                0x0001f86e                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x0001f86e        0x4 /usr/lib/gcc/avr/4.3.5/avr51/libgcc.a(_exit.o)
 *(.fini0)
                0x0001f872                _etext = .

.data           0x00800200        0x2 load address 0x0001f872
                0x00800200                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800200        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/crtm128rfa1.o
 .data          0x00800200        0x1 ATmegaBOOT_168.o
                0x00800200                pagesz
 .data          0x00800201        0x0 /usr/lib/gcc/avr/4.3.5/avr51/libgcc.a(_exit.o)
 .data          0x00800201        0x0 /usr/lib/gcc/avr/4.3.5/avr51/libgcc.a(_clear_bss.o)
 .data          0x00800201        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/libc.a(eerd_byte_atmega128rfa1.o)
 .data          0x00800201        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/libc.a(eewr_byte_atmega128rfa1.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x00800202                . = ALIGN (0x2)
 *fill*         0x00800201        0x1 00
                0x00800202                _edata = .
                0x00800202                PROVIDE (__data_end, .)

.bss            0x00800202      0x10b
                0x00800202                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x00800202        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/crtm128rfa1.o
 .bss           0x00800202        0x4 ATmegaBOOT_168.o
                0x00800202                bootuart
                0x00800203                error_count
                0x00800204                app_start
 .bss           0x00800206        0x0 /usr/lib/gcc/avr/4.3.5/avr51/libgcc.a(_exit.o)
 .bss           0x00800206        0x0 /usr/lib/gcc/avr/4.3.5/avr51/libgcc.a(_clear_bss.o)
 .bss           0x00800206        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/libc.a(eerd_byte_atmega128rfa1.o)
 .bss           0x00800206        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/libc.a(eewr_byte_atmega128rfa1.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x00800206      0x107 ATmegaBOOT_168.o
                0x00800206                address
                0x00800208                buff
                0x00800308                length
                0x0080030a                i
                0x0080030b                address_high
                0x0080030c                flags
                0x0080030d                PROVIDE (__bss_end, .)
                0x0001f872                __data_load_start = LOADADDR (.data)
                0x0001f874                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0080030d        0x0
                0x0080030d                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0080030d                PROVIDE (__noinit_end, .)
                0x0080030d                _end = .
                0x0080030d                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0x0
 *(.eeprom*)
                0x00810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x00000000     0x234c
 *(.stab)
 .stab          0x00000000      0x750 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/crtm128rfa1.o
 .stab          0x00000750     0x1a88 ATmegaBOOT_168.o
                               0x1a94 (size before relaxing)
 .stab          0x000021d8       0x90 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/libc.a(eerd_byte_atmega128rfa1.o)
                                 0x9c (size before relaxing)
 .stab          0x00002268       0xe4 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/libc.a(eewr_byte_atmega128rfa1.o)
                                 0xf0 (size before relaxing)

.stabstr        0x00000000     0x41b4
 *(.stabstr)
 .stabstr       0x00000000     0x41b4 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr51/crtm128rfa1.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(ATmegaBOOT_168_osd_merkur.elf elf32-avr)
LOAD linker stubs
